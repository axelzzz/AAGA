package algorithms;

import java.awt.Point;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;
import java.util.Set;

public class DefaultTeam {
	
	  Evaluation e = new Evaluation();

	  
	  /*
	  public void afficherNbVoisins(ArrayList<Point> points, int edgeThreshold, String str) {
		  
		  System.out.println(str);
		  
		  for(int i = 0 ; i < points.size() ; i++) 
		    	System.out.println("nb voisins "+ nbVoisinsOfPoint(points.get(i), points, edgeThreshold) );
		  
	  }
	  */
	  
	  public int nbVoisinsOfPoint(Point p, ArrayList<Point> points, int edgeThreshold) {
		  return e.neighbor(p, points, edgeThreshold).size();
	  }
	  
	  public void afficherListeDegres(ArrayList<Point> points, LinkedHashMap<Point,Integer> map) {
		  
		  for(Point p:points) 
			  System.out.println("deg of "+p+" : "+map.get(p));
		  
	  }
	  
	  
	  
	  public LinkedHashMap<Point,Integer> initMapAssocPtsDeg(ArrayList<Point> points, int edgeThreshold) {
		  
		  LinkedHashMap<Point,Integer> assocPointsDegres = new LinkedHashMap<Point, Integer>();
		  
		  for(Point p:points) {
			  assocPointsDegres.put( p, Integer.valueOf( nbVoisinsOfPoint(p, points, edgeThreshold) ) );
		  }
		  
		  return assocPointsDegres;
	  }
	  
	  
	  
	  public void afficherMapDegres(LinkedHashMap<Point,Integer> mapPtsDeg) {
		  
		  Iterator it = mapPtsDeg.entrySet().iterator();
		  
		  while (it.hasNext()) {
			  Map.Entry<Point, Integer> pair = (Map.Entry<Point, Integer>)it.next();
		      System.out.println(pair.getKey() + " = " + pair.getValue());
		  }
	  }
	  
	  
	  
	  //ok
	  public Point pointDegreMax(LinkedHashMap<Point, Integer> mapPtsDeg, int edgeThreshold) {
				  
		  Iterator it = mapPtsDeg.entrySet().iterator();
		  	
	      Map.Entry<Point, Integer> pair = (Map.Entry<Point, Integer>)it.next();
	      
	      Point pointMaxVoisins = pair.getKey();
	      int max = Integer.valueOf(pair.getValue());
		  //System.out.println(pair.getKey() + " CSCSDVSDVC= " + pair.getValue());
		  
		  
		  while (it.hasNext()) {
			  Map.Entry<Point, Integer> pairSuite = (Map.Entry<Point, Integer>)it.next();
			  //System.out.println(pairSuite.getKey() + " C= " + pairSuite.getValue());
			 if(Integer.valueOf(pairSuite.getValue() ) > max ) {
				 max = Integer.valueOf(pairSuite.getValue() );
				 pointMaxVoisins = pairSuite.getKey();
			 }
				 
		  }
		  
		  //System.out.println(pointMaxVoisins + " DEG max = " + max);
		  
		  return pointMaxVoisins;
	  }
	  
	  //ok
	  public Point pointDegreMin(LinkedHashMap<Point, Integer> mapPtsDeg, int edgeThreshold) {
		  
		  Iterator it = mapPtsDeg.entrySet().iterator();
		  	
	      Map.Entry<Point, Integer> pair = (Map.Entry<Point, Integer>)it.next();
	      
	      Point pointMinVoisins = pair.getKey();
	      int min = Integer.valueOf(pair.getValue());
		  
		  while (it.hasNext()) {
			  Map.Entry<Point, Integer> pairSuite = (Map.Entry<Point, Integer>)it.next();
			 
			 if(Integer.valueOf(pairSuite.getValue() ) < min ) {
				 min = Integer.valueOf(pairSuite.getValue() );
				 pointMinVoisins = pairSuite.getKey();
			 }
				 
		  }
		  
		  //System.out.println(pointMinVoisins + " DEG min = " + min);
		  
		  return pointMinVoisins;
	  }
  
	 
	  //ok 
	  public LinkedHashMap<Point, Integer> cloneMap(LinkedHashMap<Point, Integer> assocPtsDeg) {
		  
		  LinkedHashMap<Point, Integer> copyMap = new LinkedHashMap<Point, Integer>();
		  
		  Iterator it = assocPtsDeg.entrySet().iterator();
		  
		  while (it.hasNext()) {
			  Map.Entry<Point, Integer> pair = (Map.Entry<Point, Integer>)it.next();
		      copyMap.put(new Point(pair.getKey()), Integer.valueOf(pair.getValue().intValue()) );
		  }
		  
		  return copyMap;
	  }
	  
	  
	 
	  //ok
	  public ArrayList<Point> supprimerDoublons(ArrayList<Point> origins) {
		  
	      Set set = new HashSet() ;
	      set.addAll(origins) ;
	      ArrayList<Point> res = new ArrayList<>(set) ;	
	      //System.out.println("size list after supp doublons "+res.size());
	      return res;
			  
	  }
  
	  
	  //ok
	  public ArrayList<Point> triCroissantDegPoint(LinkedHashMap<Point, Integer> assocPtsDeg, ArrayList<Point> origins, int edgeThreshold) {
	  
		  LinkedHashMap<Point, Integer> copyMap = cloneMap(assocPtsDeg);
		  
		  ArrayList<Point> originsWithoutDoublons = supprimerDoublons(origins);
		  ArrayList<Point> res = new ArrayList<>();
	  
		  while( res.size() != originsWithoutDoublons.size() ) {
		  
			  Point currentMin = pointDegreMin(copyMap, edgeThreshold);
		  
			  copyMap.remove(currentMin);
			  res.add(currentMin);
		  
			  //System.out.println("size map "+copyMap.size());		  
		  
		  }	  
	 
		  return res;
	  }
  
	  
	  //ok
	  public ArrayList<Point> triDecroissantDegPoint(LinkedHashMap<Point, Integer> assocPtsDeg, ArrayList<Point> origins, int edgeThreshold) {
	  	  
		  ArrayList<Point> tmp = triCroissantDegPoint(assocPtsDeg, origins, edgeThreshold);
		  
		  ArrayList<Point> res = new ArrayList<>();
		  
		  for(int j = tmp.size() - 1 ; j >= 0 ; j--) {
			  res.add(tmp.get(j));
			  //System.out.println("deg de "+tmp.get(j)+" : "+assocPtsDeg.get(tmp.get(j)) );
		  }
		  
		  return res;
		  
	  }

  /*
  public ArrayList<Point> calculFVSGloutonDegresDec(LinkedHashMap<Point, Integer> assocPtsDeg, ArrayList<Point> points, int edgeThreshold) {
	  
	    ArrayList<Point> fvs = new ArrayList<Point>();
	    
	    ArrayList<Point> decroissants = triDecroissantVoisinsPoint(points, edgeThreshold);
	    fvs.addAll(points);
	    
	    for(int i = 0 ; i < 50 ; i++) {
	    	Point max = decroissants.remove(0);
	    	fvs.remove(max);
	    }
	    
	    
	    return fvs;
	    
  }
  */
	  
	  public ArrayList<Point> reste(ArrayList<Point> points, ArrayList<Point> toRemove) {
		  
		  ArrayList<Point> res = new ArrayList<>();
		  res.addAll(points);
		  
		  for(Point p:toRemove)
			  res.remove(p);
		  
		  return res;
	  }
  
	  public Point clonePoint(Point toClone) {
		  
		  return new Point(toClone.x, toClone.y);
	  }
	  
	  public ArrayList<Point> cloneList(ArrayList<Point> toClone) {
		  
		  ArrayList<Point> res = new ArrayList<>();
		  
		  for(Point p:toClone)
			  res.add(clonePoint(p));
		  
		  return res;
	  }
  
  //remplacer 2 points vivants par 1 point mort
  public ArrayList<Point> localSearchV1(ArrayList<Point> origins, ArrayList<Point> solution, ArrayList<Point> reste, int edgeThreshold) {
	  
	  ArrayList<Point> copyReste = cloneList(reste);
	 
	  ArrayList<Point> tmp = cloneList(solution);	  
	
	  Random rand = new Random();
	  
	  Point p = tmp.remove(rand.nextInt(tmp.size()));
	  Point q = tmp.remove(rand.nextInt(tmp.size()));
	  
	  
	  
	  Point r = copyReste.remove(rand.nextInt(reste.size()));
	  
	  tmp.add(r);
	  
	  if(e.isValid(origins, tmp, edgeThreshold)) {
		  //System.out.println("is valid");
		  return tmp;
	  }
	  else {
		  //System.out.println("is not valid");
		  return solution;
	  }
		  
  }
  
  //remplacer 3 points vivants par 2 points morts
  public ArrayList<Point> localSearchV2(ArrayList<Point> origins, ArrayList<Point> solution, ArrayList<Point> reste, int edgeThreshold) {
	  
	  ArrayList<Point> copyReste = cloneList(reste);
	 
	  ArrayList<Point> tmp = cloneList(solution);	  
	
	  Random rand = new Random();
	  
	  Point p = tmp.remove(rand.nextInt(tmp.size()));
	  Point q = tmp.remove(rand.nextInt(tmp.size()));
	  Point r = tmp.remove(rand.nextInt(tmp.size()));
	  
	  
	  
	  Point s = copyReste.remove(rand.nextInt(copyReste.size()));
	  Point t = copyReste.remove(rand.nextInt(copyReste.size()));
	  
	  tmp.add(s);
	  tmp.add(t);
	  
	  if(e.isValid(origins, tmp, edgeThreshold)) {
		  //System.out.println("is valid");
		  return tmp;
	  }
	  else {
		  //System.out.println("is not valid");
		  return solution;
	  }
		  
  }
  
//remplacer 3 points vivants par 1 point mort
  public ArrayList<Point> localSearchV3(ArrayList<Point> origins, ArrayList<Point> solution, ArrayList<Point> reste, int edgeThreshold) {
	  
	  ArrayList<Point> copyReste = cloneList(reste);
	 
	  ArrayList<Point> tmp = cloneList(solution);	  
	
	  Random rand = new Random();
	  
	  Point p = tmp.remove(rand.nextInt(tmp.size()));
	  Point q = tmp.remove(rand.nextInt(tmp.size()));
	  Point r = tmp.remove(rand.nextInt(tmp.size()));
	  
	  
	  
	  Point s = copyReste.remove(rand.nextInt(copyReste.size()));
	  
	  tmp.add(s);
	  
	  if(e.isValid(origins, tmp, edgeThreshold)) {
		  //System.out.println("is valid");
		  return tmp;
	  }
	  else {
		  //System.out.println("is not valid");
		  return solution;
	  }
		  
  }
  
//remplacer 4 points vivants par 3 point mort
  public ArrayList<Point> localSearchV4(ArrayList<Point> origins, ArrayList<Point> solution, ArrayList<Point> reste, int edgeThreshold) {
	  
	  ArrayList<Point> copyReste = cloneList(reste);
	 
	  ArrayList<Point> tmp = cloneList(solution);	  
	
	  Random rand = new Random();
	  
	  Point p = tmp.remove(rand.nextInt(tmp.size()));
	  Point q = tmp.remove(rand.nextInt(tmp.size()));
	  Point r = tmp.remove(rand.nextInt(tmp.size()));
	  Point s = tmp.remove(rand.nextInt(tmp.size()));
	  
	  
	  
	  Point t = copyReste.remove(rand.nextInt(copyReste.size()));
	  Point u = copyReste.remove(rand.nextInt(copyReste.size()));
	  Point v = copyReste.remove(rand.nextInt(copyReste.size()));
	  
	  tmp.add(t);
	  tmp.add(u);
	  tmp.add(v);
	  
	  if(e.isValid(origins, tmp, edgeThreshold)) {
		  //System.out.println("is valid");
		  return tmp;
	  }
	  else {
		  //System.out.println("is not valid");
		  return solution;
	  }
		  
  }
  
//remplacer 4 points vivants par 2 point mort
  public ArrayList<Point> localSearchV5(ArrayList<Point> origins, ArrayList<Point> solution, ArrayList<Point> reste, int edgeThreshold) {
	  
	  ArrayList<Point> copyReste = cloneList(reste);
	 
	  ArrayList<Point> tmp = cloneList(solution);	  
	
	  Random rand = new Random();
	  
	  Point p = tmp.remove(rand.nextInt(tmp.size()));
	  Point q = tmp.remove(rand.nextInt(tmp.size()));
	  Point r = tmp.remove(rand.nextInt(tmp.size()));
	  Point s = tmp.remove(rand.nextInt(tmp.size()));
	  
	  
	  
	  Point t = copyReste.remove(rand.nextInt(copyReste.size()));
	  Point u = copyReste.remove(rand.nextInt(copyReste.size()));
	 
	  tmp.add(t);
	  tmp.add(u);
	  
	  if(e.isValid(origins, tmp, edgeThreshold)) {
		  //System.out.println("is valid");
		  return tmp;
	  }
	  else {
		  //System.out.println("is not valid");
		  return solution;
	  }
		  
  }
  
//remplacer 1 point vivant par 1 point mort
  public ArrayList<Point> randomReplace(ArrayList<Point> origins, ArrayList<Point> solution, ArrayList<Point> reste, int edgeThreshold) {
	  
	  ArrayList<Point> copyReste = cloneList(reste);
	 
	  ArrayList<Point> tmp = cloneList(solution);	  
	
	  Random rand = new Random();
	  
	  Point p = tmp.remove(rand.nextInt(tmp.size()));
	  
	  Point q = copyReste.remove(rand.nextInt(copyReste.size()));
	  
	  tmp.add(q);
	  
	  
	  if(e.isValid(origins, tmp, edgeThreshold)) {
		  //System.out.println("is valid");
		  return tmp;
	  }
	  else {
		  //System.out.println("is not valid");
		  return solution;
	  }
		  
  }
  
//permet d'avoir souvent 76 après glouton inverse
  public ArrayList<Point> score76(ArrayList<Point> origins, ArrayList<Point> solution, ArrayList<Point> rest, int edgeThreshold, int nbIte) {
	  
	  ArrayList<Point> res = localSearchV1(origins, solution, rest, edgeThreshold);
	  
	  for(int i = 0 ; i < nbIte ; i++) {
		  
		  res = localSearchV1(origins, res, reste(origins, res), edgeThreshold);
		  res = randomReplace(origins, res, reste(origins, res), edgeThreshold);
		  res = localSearchV1(origins, res, reste(origins, res), edgeThreshold);
	
		  
	  }
	  
	  return res;
		  
  }
  
  public ArrayList<Point> gloutonRandom(LinkedHashMap<Point, Integer> assocPtsDeg, 
								  		ArrayList<Point> origins, 
								  		ArrayList<Point> pointsTries, 
								  		int edgeThreshold) {
							
	  //ArrayList<Point> copyTries = cloneList(pointsTriesCroissant);
	  ArrayList<Point> tmp = cloneList(origins);  
	  ArrayList<Point> res = cloneList(origins);
	  
	  Random r = new Random();
	  
	  for(int i = 0 ; i < 100 ; i++) {
		 
		  Point random = origins.get(r.nextInt(origins.size()) );
		  //Point toRemove = pointsTries.remove(0);
		  //System.out.println("point "+toRemove+" de deg "+assocPtsDeg.get(toRemove));
		  tmp.remove(random);
								
								
		  if(e.isValid(origins, tmp, edgeThreshold)) {
			 //System.out.println("is valid");
			 res.remove(random);
			 //System.out.println("size res "+res.size() );
		  }
		  else {
			  //tmp = res;
		  }
			
	  }
	  
	  
	  return res;
	}
  
  
  /*partir depuis le graphe initial et supp les points de deg max à chq ite*/
  
  /* essayer version dans laquelle on retrie après avoir supprimé */
  public ArrayList<Point> glouton(LinkedHashMap<Point, Integer> assocPtsDeg, 
								  		ArrayList<Point> origins, 
								  		ArrayList<Point> pointsTries, 
								  		int edgeThreshold) {

		ArrayList<Point> tmp = cloneList(origins);  
		ArrayList<Point> res = cloneList(origins);

		for(int i = 0 ; i < pointsTries.size() ; i++) {
		
			
			Point toRemove = pointsTries.get(i);
			//System.out.println("point "+toRemove+" de deg "+assocPtsDeg.get(toRemove));
			tmp.remove(toRemove);	
				
			if(e.isValid(origins, tmp, edgeThreshold)) {
				//System.out.println("is valid");
				
				res.remove(toRemove);
			}
			else {
				//System.out.println("is not valid");
				//System.out.println("I "+i );
				tmp.add(toRemove);
			}
		
		}
		
		
		return res;
  }
    
/* ko */
  public ArrayList<Point> gloutonInverse(LinkedHashMap<Point, Integer> assocPtsDeg, 
		  								 ArrayList<Point> origins, 
		  								 ArrayList<Point> pointsTries, 
		  								 int edgeThreshold) {
	  
	 
	    ArrayList<Point> tmp = new ArrayList<Point>(); 
		ArrayList<Point> res = new ArrayList<Point>();
		
		for(int i = 0 ; i < pointsTries.size() ; i++) {
		
			
			Point toAdd = pointsTries.get(i);
			System.out.println("point "+toAdd+" de deg "+assocPtsDeg.get(toAdd));
			tmp.add(toAdd);	
				
			if(e.isValid(origins, tmp, edgeThreshold)) {
				System.out.println("is valid");
				
				res.add(toAdd);
				
			}
			else {
				System.out.println("is not valid");
				//System.out.println("I "+i );
				tmp.remove(toAdd);
			}
		
		}
		
		
		return res;
	  
  }
  
  
  /* faire LS sans gloutonInverse revient aux mêmes résultats que gloutonInverse puis LS */
  
  
  /* PISTES : essayer glouton normal ; essayer faire map qui associe à chaque Point un score, plus il est dans une bonne solution (76) plus on l'incrémente, 
   * on l ajoute ensuite dans la liste resultat 
   * ; essayer creer une methode qui recense tous les cycles en liste de points et tester de supprimer les points de plus gros deg de ces cycles*/
  
  public ArrayList<Point> calculFVS(ArrayList<Point> points, int edgeThreshold) {	  
	  
	  points = supprimerDoublons(points);
	  ArrayList<Point> resGlouton; 
	  ArrayList<Point> resGloutonInverse;
	  
	  LinkedHashMap<Point, Integer> mapDeg = initMapAssocPtsDeg(points, edgeThreshold);
	  
	  ArrayList<Point> pointsTriesCroissant = triCroissantDegPoint(mapDeg, points, edgeThreshold);
	  ArrayList<Point> pointsTriesDecroissant = triDecroissantDegPoint(mapDeg, points, edgeThreshold);
	 
	  //resGlouton = gloutonRandom(test, points, pointsTriesDecroissant, edgeThreshold);
	  resGlouton = glouton(mapDeg, points, pointsTriesCroissant, edgeThreshold);
	  //resGloutonInverse = gloutonInverse(mapDeg, points, pointsTriesCroissant, edgeThreshold);
	  //resGloutonInverse = reste(points, resGloutonInverse);
	  ArrayList<Point> morts = reste(points, resGlouton);
	  
	  ArrayList<Point> res = score76(points, resGlouton, morts, edgeThreshold, 15000);
	  
	  return res;
  }
}
